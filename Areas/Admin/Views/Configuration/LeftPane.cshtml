@{
    List<CmsConfiguration> configs = ConfigurationService.GetAll().OrderBy(n => n.Name).ToList();
    Dictionary<string, string> otherConfigs = ConfigurationService.RequestedConfigurations.Where(r => !configs.Any(c => c.Name == r.Key)).ToDictionary(k => k.Key, v => v.Value);


}

    <ul>
        <li>
            <a href="/Admin/Configuration/FlushCache">
                @Html.MaterialIcon("refresh")
                <span>Flush Cache</span>
            </a>
        </li>
        <li>
            <a href="/Admin/Configuration/Edit">
                @Html.MaterialIcon("add_box")
                <span>Create</span>
            </a>
        </li>
        @foreach (Penguin.Cms.Configuration.CmsConfiguration thisConfig in configs)
        {
            <li>
                @{string Link = $"/Admin/Configuration/EditByName?Name={thisConfig.Name}";}
                <a href="@Link" @Html.Attribute("class", "selected", string.Equals(Context.Request.Path, Link))>
                    <i class="material-icons md-24">
                        settings_applications
                    </i>
                    <span>
                        @thisConfig.Name
                    </span>
                </a>
            </li>
        }
        @foreach (KeyValuePair<string, string> thisConfig in otherConfigs)
        {
            <li>
                @{string Link = $"/Admin/Configuration/EditByName?Name={thisConfig.Key}&Value={System.Web.HttpUtility.UrlEncode(thisConfig.Value)}";}
                <a href="@Link" @Html.Attribute("class", "selected", string.Equals(Context.Request.Path, Link))>
                    <i class="material-icons md-24">
                        settings_applications
                    </i>
                    <span>
                        @thisConfig.Key
                    </span>
                </a>
            </li>
        }
    </ul>